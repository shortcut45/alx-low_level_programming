!<arch>
0-isupper.c/    0           0     0     644     220       `
#include "main.h"

/**
 * _isupper - check if it is uppercase with a value of 1
 * @c: integer c
 * Return: 1, else 0
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     268       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: string
 * @b: constant byte
 * @n: byte
 * Return: pointer s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     275       `
#include "main.h"


/** _strcat - concatenates two strings
 * @dest: destination
 * @src: source
 * Return: string
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int y = 0;

	while(dest[i++])
		y++;
	for (i = 0;src[i]; i++)
	
		dest[y++] = src[i];
	return(dest);
}

100-atoi.c/     0           0     0     644     38        `
#include "main.h"

int _atoi(char *s)
1-isdigit.c/    0           0     0     644     301       `
#include "main.h"
#include <stdio.h>
/**
 * _isdigit - checks for a digit 
 * 0 through 9
 * @c: integer c
 * Return: 1 if c, otherwise 0
 */

int _isdigit(int c)
{
	int x = 0;

	char digit;

	for (digit = '0'; digit <= '9'; digit = digit + 1)
	{
		if (digit == c)
		{
			x = 1;
		}
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     327       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: destination of the memory area
 * @src: source of memory
 * @n: number of bytes to copy
 *
 * Return: poitner dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     359       `
#include "main.h"
#include <string.h>

/**
 * _strncat - concatenates two strings
 * @dest: destination char
 * @src: source char
 * @n: number of bytes from src
 * Return: new string
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int y = 0;

	while(dest[i++])
		y++;
	for (i = 0; src[i]&& i < n; i++)
		dest[y++] = src[i];
	return(dest);
}

2-strchr.c/     0           0     0     644     350       `
#include "main.h"
#include <stdio.h>

/**
 * @s: string
 * @c: character
 * Return: a pointer to the first occurence of the character
 * c in the ctring or NULL if the character is not found
 */

char *_strchr(char *s, char c)
{
	int q;

	while (1)
	{
		q = *s++;
		if (q == c)
		{
			return (s - 1);
		}
		if (q == 0)
		{
			return (NULL);
		}
	}
}
2-strlen.c/     0           0     0     644     295       `
#include "main.h"
#include <string.h>
#include <stdio.h>

/**
 * int _strlen - returns the length of a string
 * @s: string
 * Description - returns the length of a string
 * Return: length of string
 */

int _strlen(char *s)
{
	int len;

	len = _strlen(s);
	printf("%d\n", len);
	return (0);
}

2-strncpy.c/    0           0     0     644     69        `
#include "main.h"

char *_strncpy(char *dest, char *src, int n)
{

}

3-islower.c/    0           0     0     644     201       `
#include "main.h"

/**
 * islower - checks for lowercase character
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */

int islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     250       `
#include "main.h"

/**
 * _puts - prints a string, followed by a new line to stout
 * * @str: string
 * Return: void
 */

void _puts(char *str)
{
	str = "I do nor fear computers. I fear the lack of them - Isaac asimov";
	_puts(str);
	_puts("\n");
}	
3-strcmp.c/     0           0     0     644     161       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: integer
 */

int _strcmp(char *s1, char *s2)
{

}

3-strspn.c/     0           0     0     644     493       `
#include "main.h"

/**
 * _strspn - gets the length of the prefix substring
 * @s: string
 * @accept: string containing the list of char to accept in match s
 * which consist only of bytes from accept
 */

unsigned int_strspn(char *s, char *accept)
{
	int i, x, y, flag;

	y = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;

		for (x = 0; accept[x] != '\0'; x++)
		{
			if (s[i] == accept[x])
			{
				y++;
				flag = 1;
			}
		}
		if (flag == 0)
		{
			return (y);
		}

	}
	return (0);
}

4-isalpha.c/    0           0     0     644     308       `
#include "main.h"

/**
 * _isalpha - checks for alphanumeric character
 * @c: c is an ascii character
 *
 * Return: returns 0 or 1 depending on condition
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     494       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of byte
 * @s: string to search
 * @accept: string containing the byte
 *
 * Return: a pointer to the byte in s that mathces one of the bytes in accept,
 * or NULL if no such byte is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     544       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - locates a substring
 * @haystack: string to search through
 * @needle: the first occurence of the string
 * Return: a pointer to the beginning of the located substring
 * NULL if the substring is not found.
 */

char *_strstr(char *haystack, char *needle)
{
	int q, w;

	for (q = 0; haystack[q] != '\0'; q++)
	{
		for (w = 0; needle[w] != '\0'; w++)
		{
			if (haystack[q + w] != needle[w])
			{
				break;
			}
		}
		if (!needle[w])
		{
			return (&haystack[q]);
		}
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     252       `
#include "main.h"

/**
 *  _abs - computes the absolute value of an integer
 *  @n: parameter
 *  Return: absolute value of number
 */

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (-n);
	}
	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _strcpy - copies the string, including the terminating null byte
 * @dest: destination
 * @src: source
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}

	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     45        `
#include "main.h"

int _putchar(char c)
{

}

